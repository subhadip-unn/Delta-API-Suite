version: 2.1
workflows:
  version: 2
  build:
    jobs:
      - dockerBuild:
          context:
            - repos
            - stg_env
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - main
                - develop
      - dockerBuildAndPush:
          context:
            - repos
            - stg_env
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - stgDeploy:
          requires:
            - dockerBuildAndPush
          context:
            - repos
            - stg_env
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - approveProdDeploy:
          type: approval
          requires:
            - stgDeploy
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - prodDeploy:
          requires:
            - approveProdDeploy
          context:
            - repos
            - prod_env
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
jobs:
  dockerBuild:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: get project group name
          command: echo 'export CB_PROJECT_GROUPNAME=`echo $CIRCLE_PROJECT_REPONAME | cut -d "-"  -f1`' >> $BASH_ENV
      - run:
          name: get project name
          command: echo 'export CB_PROJECT_NAME=`echo ${CIRCLE_PROJECT_REPONAME/\`echo $CIRCLE_PROJECT_REPONAME | cut -d "-"  -f1\`-/ } | xargs`' >> $BASH_ENV
      - run:
          name: Build from dockerfile
          command: docker build -f Dockerfile -t $DOCKER_REGISTRY/$CB_PROJECT_GROUPNAME/$CB_PROJECT_NAME:$CIRCLE_SHA1 .
  dockerBuildAndPush:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: get project group name
          command: echo 'export CB_PROJECT_GROUPNAME=`echo $CIRCLE_PROJECT_REPONAME | cut -d "-"  -f1`' >> $BASH_ENV
      - run:
          name: get project name
          command: echo 'export CB_PROJECT_NAME=`echo ${CIRCLE_PROJECT_REPONAME/\`echo $CIRCLE_PROJECT_REPONAME | cut -d "-"  -f1\`-/ } | xargs`' >> $BASH_ENV
      - run:
          name: Build TAG from dockerfile
          command: docker build -f Dockerfile -t $DOCKER_REGISTRY/$CB_PROJECT_GROUPNAME/$CB_PROJECT_NAME:$CIRCLE_TAG .
      - run:
          name: Log in to docker hub
          command: |
            docker login $DOCKER_REGISTRY -u $REPO_USER -p $REPO_PASSWORD
      - run:
          name: Push Docker Image
          command: docker push $DOCKER_REGISTRY/$CB_PROJECT_GROUPNAME/$CB_PROJECT_NAME:$CIRCLE_TAG
  stgDeploy:
    docker:
      - image: oveits/curl-envsubst-jq:alpine
    resource_class: small
    steps:
      - checkout
      - run:
          name: update config
          command: export EPOCHSECONDS=`date '+%s'`;envsubst '${CIRCLE_TAG}:${DOCKER_REGISTRY}:${REPO_USER}:${REPO_PASSWORD}:${INSTANCE_COUNT}:${LOCUS_HOST}:${EPOCHSECONDS}' < job.json > project.json
      - run:
          name: Deploy config
          command: curl -k -H "CF-Access-Client-Id:$CF_ACCESS_CLIENT_ID" -H "CF-Access-Client-Secret:$CF_ACCESS_CLIENT_SECRET" --request PUT --data @project.json https://$NOMAD_HOST/v1/jobs -s
  prodDeploy:
    docker:
      - image: oveits/curl-envsubst-jq:alpine
    resource_class: small
    steps:
      - checkout
      - run:
          name: update config
          command: export EPOCHSECONDS=`date '+%s'`;envsubst '${CIRCLE_TAG}:${DOCKER_REGISTRY}:${REPO_USER}:${REPO_PASSWORD}:${INSTANCE_COUNT}:${LOCUS_HOST}:${EPOCHSECONDS}' < job.json > project.json
      - run:
          name: Deploy config
          command: curl -k -H "CF-Access-Client-Id:$CF_ACCESS_CLIENT_ID" -H "CF-Access-Client-Secret:$CF_ACCESS_CLIENT_SECRET" --request PUT --data @project.json https://$NOMAD_HOST/v1/jobs -s
