"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_components_modes_APIJourney_tsx",{

/***/ "(app-pages-browser)/./lib/comparison-engine.ts":
/*!**********************************!*\
  !*** ./lib/comparison-engine.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareJsonData: function() { return /* binding */ compareJsonData; }\n/* harmony export */ });\n// Advanced Comparison Engine - Migrated from React project\n// This is the core comparison logic that makes our product world-class\n// Severity classification based on path and type\nconst getSeverity = (path, type)=>{\n    // Critical paths that should never change\n    const criticalPaths = [\n        \"id\",\n        \"status\",\n        \"error\",\n        \"success\",\n        \"code\"\n    ];\n    if (criticalPaths.some((critical)=>path.includes(critical))) {\n        return \"critical\";\n    }\n    // High importance paths\n    const highPaths = [\n        \"data\",\n        \"result\",\n        \"response\",\n        \"message\",\n        \"title\",\n        \"name\"\n    ];\n    if (highPaths.some((high)=>path.includes(high))) {\n        return \"high\";\n    }\n    // Medium importance paths\n    const mediumPaths = [\n        \"count\",\n        \"total\",\n        \"size\",\n        \"length\",\n        \"timestamp\",\n        \"date\"\n    ];\n    if (mediumPaths.some((medium)=>path.includes(medium))) {\n        return \"medium\";\n    }\n    // Type-based severity\n    if (type === \"type-changed\") return \"high\";\n    if (type === \"missing\" || type === \"extra\") return \"medium\";\n    return \"low\";\n};\n// Advanced similarity matching for intelligent array comparison\nconst findBestMatch = (itemA, arrayB, usedIndices)=>{\n    let bestMatch = null;\n    let bestSimilarity = 0;\n    for(let i = 0; i < arrayB.length; i++){\n        if (usedIndices.has(i)) continue;\n        const itemB = arrayB[i];\n        const similarity = calculateSimilarity(itemA, itemB);\n        if (similarity > bestSimilarity && similarity >= 0.5) {\n            bestMatch = {\n                match: itemB,\n                index: i,\n                similarity\n            };\n            bestSimilarity = similarity;\n        }\n    }\n    return bestMatch;\n};\n// Calculate similarity between two objects (0-1 scale)\nconst calculateSimilarity = (a, b)=>{\n    if (a === b) return 1.0;\n    if (typeof a !== typeof b) return 0.0;\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length === 0 && b.length === 0) return 1.0;\n        if (a.length === 0 || b.length === 0) return 0.0;\n        // Calculate average similarity of array elements\n        const similarities = a.map((itemA)=>{\n            const bestMatch = findBestMatch(itemA, b, new Set());\n            return bestMatch ? bestMatch.similarity : 0;\n        });\n        return similarities.reduce((sum, sim)=>sum + sim, 0) / similarities.length;\n    }\n    if (typeof a === \"object\" && a !== null && b !== null) {\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n        const allKeys = new Set([\n            ...keysA,\n            ...keysB\n        ]);\n        if (allKeys.size === 0) return 1.0;\n        let matchingKeys = 0;\n        let totalSimilarity = 0;\n        for (const key of allKeys){\n            if (key in a && key in b) {\n                matchingKeys++;\n                totalSimilarity += calculateSimilarity(a[key], b[key]);\n            }\n        }\n        const keySimilarity = matchingKeys / allKeys.size;\n        const valueSimilarity = matchingKeys > 0 ? totalSimilarity / matchingKeys : 0;\n        return (keySimilarity + valueSimilarity) / 2;\n    }\n    // For primitives, use string similarity\n    const strA = String(a);\n    const strB = String(b);\n    if (strA === strB) return 1.0;\n    if (strA.length === 0 && strB.length === 0) return 1.0;\n    if (strA.length === 0 || strB.length === 0) return 0.0;\n    // Simple Levenshtein distance-based similarity\n    const distance = levenshteinDistance(strA, strB);\n    const maxLength = Math.max(strA.length, strB.length);\n    return 1 - distance / maxLength;\n};\n// Levenshtein distance calculation\nconst levenshteinDistance = (str1, str2)=>{\n    const matrix = Array(str2.length + 1).fill(null).map(()=>Array(str1.length + 1).fill(null));\n    for(let i = 0; i <= str1.length; i++)matrix[0][i] = i;\n    for(let j = 0; j <= str2.length; j++)matrix[j][0] = j;\n    for(let j = 1; j <= str2.length; j++){\n        for(let i = 1; i <= str1.length; i++){\n            const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n            matrix[j][i] = Math.min(matrix[j][i - 1] + 1, matrix[j - 1][i] + 1, matrix[j - 1][i - 1] + indicator // substitution\n            );\n        }\n    }\n    return matrix[str2.length][str1.length];\n};\n// Count fields in an object for statistics\nconst countFields = (obj)=>{\n    if (obj === null || obj === undefined) return 0;\n    if (typeof obj !== \"object\") return 1;\n    if (Array.isArray(obj)) return obj.reduce((sum, item)=>sum + countFields(item), 0);\n    return Object.keys(obj).reduce((sum, key)=>sum + countFields(obj[key]), 0);\n};\n// Main comparison function - the heart of our product\nconst compareJsonData = function(obj1, obj2) {\n    let isOrderSensitive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    const differences = [];\n    const compare = function(a, b) {\n        let path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n        if (typeof a !== typeof b) {\n            const severity = getSeverity(path, \"type-changed\");\n            differences.push({\n                path,\n                type: \"type-changed\",\n                severity,\n                oldValue: a,\n                newValue: b,\n                description: \"Type changed from \".concat(typeof a, \" to \").concat(typeof b)\n            });\n            return;\n        }\n        if (Array.isArray(a) && Array.isArray(b)) {\n            if (isOrderSensitive) {\n                // Order-sensitive array comparison (strict positional matching)\n                const maxLength = Math.max(a.length, b.length);\n                for(let i = 0; i < maxLength; i++){\n                    if (i >= a.length) {\n                        const severity = getSeverity(\"\".concat(path, \"[\").concat(i, \"]\"), \"extra\");\n                        differences.push({\n                            path: \"\".concat(path, \"[\").concat(i, \"]\"),\n                            type: \"extra\",\n                            severity,\n                            oldValue: undefined,\n                            newValue: b[i],\n                            description: \"Extra array item at position \".concat(i, \" (order-sensitive)\")\n                        });\n                    } else if (i >= b.length) {\n                        const severity = getSeverity(\"\".concat(path, \"[\").concat(i, \"]\"), \"missing\");\n                        differences.push({\n                            path: \"\".concat(path, \"[\").concat(i, \"]\"),\n                            type: \"missing\",\n                            severity,\n                            oldValue: a[i],\n                            newValue: undefined,\n                            description: \"Missing array item at position \".concat(i, \" (order-sensitive)\")\n                        });\n                    } else {\n                        compare(a[i], b[i], \"\".concat(path, \"[\").concat(i, \"]\"));\n                    }\n                }\n            } else {\n                // TRULY INTELLIGENT ORDER-INSENSITIVE ARRAY COMPARISON\n                // This is the core algorithm that makes our product world-class\n                const usedIndicesInB = new Set();\n                const unmatchedFromA = [];\n                // Phase 1: Find exact matches and high-similarity matches\n                for(let i = 0; i < a.length; i++){\n                    const itemA = a[i];\n                    const bestMatch = findBestMatch(itemA, b, usedIndicesInB);\n                    if (bestMatch && bestMatch.similarity >= 0.95) {\n                        // Exact or near-exact match found\n                        usedIndicesInB.add(bestMatch.index);\n                        if (bestMatch.similarity < 1.0) {\n                            // Items are similar but not identical - compare them for detailed differences\n                            compare(itemA, bestMatch.match, \"\".concat(path, \"[\").concat(i, \"]\"));\n                        }\n                    // If similarity is 1.0, items are identical - no differences to report\n                    } else if (bestMatch && bestMatch.similarity >= 0.7) {\n                        // Partial match - these are likely the same logical item with some changes\n                        usedIndicesInB.add(bestMatch.index);\n                        compare(itemA, bestMatch.match, \"\".concat(path, \"[\").concat(i, \"]\"));\n                    } else {\n                        // No good match found - this item might be missing from B\n                        unmatchedFromA.push({\n                            item: itemA,\n                            originalIndex: i\n                        });\n                    }\n                }\n                // Phase 2: Identify truly missing items (from A but not in B)\n                for (const unmatched of unmatchedFromA){\n                    const severity = getSeverity(\"\".concat(path, \"[\").concat(unmatched.originalIndex, \"]\"), \"missing\");\n                    differences.push({\n                        path: \"\".concat(path, \"[\").concat(unmatched.originalIndex, \"]\"),\n                        type: \"missing\",\n                        severity,\n                        oldValue: unmatched.item,\n                        newValue: undefined,\n                        description: \"Item from Live API not found in New API (no similar match found)\"\n                    });\n                }\n                // Phase 3: Identify truly extra items (in B but not matched with A)\n                for(let j = 0; j < b.length; j++){\n                    if (!usedIndicesInB.has(j)) {\n                        const severity = getSeverity(\"\".concat(path, \"[\").concat(j, \"]\"), \"extra\");\n                        differences.push({\n                            path: \"\".concat(path, \"[\").concat(j, \"]\"),\n                            type: \"extra\",\n                            severity,\n                            oldValue: undefined,\n                            newValue: b[j],\n                            description: \"New item in New API not found in Live API\"\n                        });\n                    }\n                }\n            }\n            return;\n        }\n        if (typeof a === \"object\" && a !== null && b !== null) {\n            const allKeys = new Set([\n                ...Object.keys(a),\n                ...Object.keys(b)\n            ]);\n            for (const key of allKeys){\n                const newPath = path ? \"\".concat(path, \".\").concat(key) : key;\n                if (!(key in a)) {\n                    const severity = getSeverity(newPath, \"extra\");\n                    differences.push({\n                        path: newPath,\n                        type: \"extra\",\n                        severity,\n                        oldValue: undefined,\n                        newValue: b[key],\n                        description: \"Property '\".concat(key, \"' exists only in right object\")\n                    });\n                } else if (!(key in b)) {\n                    const severity = getSeverity(newPath, \"missing\");\n                    differences.push({\n                        path: newPath,\n                        type: \"missing\",\n                        severity,\n                        oldValue: a[key],\n                        newValue: undefined,\n                        description: \"Property '\".concat(key, \"' exists only in left object\")\n                    });\n                } else {\n                    compare(a[key], b[key], newPath);\n                }\n            }\n            return;\n        }\n        if (a !== b) {\n            const severity = getSeverity(path, \"changed\");\n            differences.push({\n                path,\n                type: \"changed\",\n                severity,\n                oldValue: a,\n                newValue: b,\n                description: \"Value changed from '\".concat(a, \"' to '\").concat(b, \"'\")\n            });\n        }\n    };\n    compare(obj1, obj2);\n    // Calculate summary statistics\n    const totalFields = countFields(obj1) + countFields(obj2);\n    const differentFields = differences.filter((d)=>d.type === \"changed\" || d.type === \"type-changed\").length;\n    const missingFields = differences.filter((d)=>d.type === \"missing\").length;\n    const extraFields = differences.filter((d)=>d.type === \"extra\").length;\n    const identicalFields = Math.max(0, totalFields - differences.length);\n    // Calculate severity counts\n    const criticalDiffs = differences.filter((d)=>d.severity === \"critical\").length;\n    const highDiffs = differences.filter((d)=>d.severity === \"high\").length;\n    const mediumDiffs = differences.filter((d)=>d.severity === \"medium\").length;\n    const lowDiffs = differences.filter((d)=>d.severity === \"low\").length;\n    return {\n        identical: differences.length === 0,\n        differences,\n        summary: {\n            totalFields,\n            identicalFields,\n            differentFields,\n            missingFields,\n            extraFields,\n            criticalDiffs,\n            highDiffs,\n            mediumDiffs,\n            lowDiffs\n        }\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/comparison-engine.ts\n"));

/***/ })

});